
[config]
skip_core_tasks = true
skip_rust_env_info = true
skip_crate_env_info = true

[env]
CARGO_MAKE_MESON_BUILDDIR = "./target/debug"
CARGO_MAKE_MESON_BUILDTYPE = "debug"
CARGO_MAKE_MESON_ARGS = "-Db_coverage=true"

[env.production]
CARGO_MAKE_MESON_BUILDDIR = "./target/release"
CARGO_MAKE_MESON_BUILDTYPE = "release"

[tasks.default]
alias = "build"

[tasks.setup]
description = "Setups mason and project dependencies."
category = "Development"
private = true
dependencies = ["install-meson", "clean-gcda"]
condition = { files_not_exist = ["${CARGO_MAKE_MESON_BUILDDIR}/build.ninja"] }
command = "meson"
args = ["setup", "--buildtype=${CARGO_MAKE_MESON_BUILDTYPE}", "@@split(CARGO_MAKE_MESON_ARGS, )", "${CARGO_MAKE_MESON_BUILDDIR}"]

[tasks.build]
description = "Runs mason compile to build the project."
category = "Build"
dependencies = ["setup"]
command = "meson"
args = ["compile", "-C", "${CARGO_MAKE_MESON_BUILDDIR}", "${@}"]

[tasks.test]
description = "Runs tests."
category = "Test"
dependencies = ["setup"]
command = "meson"
args = ["test", "-C", "${CARGO_MAKE_MESON_BUILDDIR}", "-v", "${@}"]

[tasks.bench]
description = "Runs benchmark tests."
category = "Test"
dependencies = ["setup"]
command = "meson"
args = ["test", "-C", "${CARGO_MAKE_MESON_BUILDDIR}", "--benchmark", "-v", "${@}"]

[tasks.linter]
description = "Runs linter."
category = "Test"
dependencies = ["build"]
command = "ninja"
args = ["-C", "${CARGO_MAKE_MESON_BUILDDIR}", "clang-tidy"]

[tasks.scan-build]
description = "Runs ninja scan-build command."
category = "Build"
dependencies = ["build"]
command = "ninja"
args = ["-C", "${CARGO_MAKE_MESON_BUILDDIR}", "scan-build"]

[tasks.scan-view]
description = "Runs scan-view command."
category = "Build"
command = "scan-view"
args = ["--allow-all-hosts", "--host", "0.0.0.0", "${@}"]

[tasks.coverage]
description = "Generates coverage report."
category = "Test"
dependencies = ["test"]
command = "ninja"
args = ["-C", "${CARGO_MAKE_MESON_BUILDDIR}", "coverage-html"]

[tasks.deps]
description = "Creates dependencies graph file."
category = "Development"
dependencies = ["setup"]
script_runner = "@duckscript"
script = '''
output = exec --fail-on-error ninja -C ${CARGO_MAKE_MESON_BUILDDIR} -t graph
writefile ./target/deps.dot ${output.stdout}
'''

[tasks.reconfigure]
description = "Runs meson reconfigure."
category = "Development"
dependencies = ["setup"]
command = "meson"
args = ["setup", "--reconfigure", "${CARGO_MAKE_MESON_BUILDDIR}", "${@}"]

[tasks.install]
description = "Runs meson install."
category = "Development"
dependencies = ["setup"]
command = "meson"
args = ["install", "-C", "${CARGO_MAKE_MESON_BUILDDIR}", "${@}"]

[tasks.clean-gcda]
description = "Deletes all gcda files."
category = "Development"
script = '''
#!@duckscript

build_dir = canonicalize ${CARGO_MAKE_MESON_BUILDDIR}
gcda_files = glob_array ${build_dir}/**/*.gcda
for path in ${gcda_files}
  rm ${path}
end
'''

[tasks.install-meson]
description = "Installs meson."
category = "Development"
install_script = '''
#!@duckscript

mesonpath = which meson
if is_empty ${mesonpath}
  pip3 install meson
end
'''
